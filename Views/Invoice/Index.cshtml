@model OracleAPInvoiceAttachmentExtract.ViewModel.InvoiceViewModel

@{
    ViewData["Title"] = "Customer Search";
}

<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

<style>
    .bg-dark-custom {
        background-color: #333333;
    }

    .bg-aoc {
        background-color: #003366;
    }

    .bg-gradient-primary {
        background: linear-gradient(90deg, #0d47a1 0%, #1976d2 100%);
    }

    .text-white {
        color: #f8f9fa !important;
    }

    .shadow-sm {
        box-shadow: 0 .125rem .25rem rgba(0, 0, 0, .075) !important;
    }

    .fw-semibold {
        font-weight: 600;
    }
</style>
<style>
    .spinner-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: rgba(255, 255, 255, 0.8);
        z-index: 9999;
    }

    .spinner-container {
        text-align: center;
        padding: 15px;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
        border-width: 0.3rem; /* Thinner border */
        border-top-color: #007bff; /* Blue color for the spinner */
        animation: spinner-grow 1.5s linear infinite;
    }

    /* Spinner Animation */
    @@keyframes spinner-grow {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* Disabled Background */
    .disabled {
        pointer-events: none;
        opacity: 0.5;
    }

    /* Hide spinner by default */
    .spinner-overlay.d-none {
        display: none;
    }

    th {
        position: relative; /* Ensure position is relative for icon placement */
    }

    .sort-icon {
        margin-left: 5px; /* Space between the header text and icon */
        font-size: 0.8em; /* Adjust icon size if necessary */
    }

    .table th, .table td {
        text-align: left;
        vertical-align: middle;
    }

        .table th:first-child, .table td:first-child {
            text-align: center;
        }

    .table th {
        white-space: nowrap;
    }
</style>
<!-- Top Banner -->
<div class="bg-aoc text-white py-2">
    <div class="container-fluid d-flex justify-content-between align-items-center">
        <!-- Left Section: Logo or Title -->
        <div>
            <span class="fw-bold fs-4">AOC-IT</span>
        </div>

        <!-- Middle Section: Application Name -->
        <div class="text-center">
            <span class="fw-bold fs-5">Oracle AP Invoice Attachment Extract</span><br />
            <span class="fs-6">@Model.Version</span>
        </div>

        <!-- Right Section: User Information and Options -->
        <div class="text-end">
            <span class="fw-bold">User :</span> @if (Model.User != null)
            {
                <b><span>@Model.User.FullName</span></b>
            }
            else
            {
                <span>N/A</span>
            } <br />
            <span class="fw-bold">DB Version :</span> @if (Model.User != null)
            {
                <b><span>@Model.User.DbVersion</span></b>
            }
            else
            {
                <span>N/A</span>
            } <br />
            <span class="fw-bold">Server :</span> @if (Model.User != null)
            {
                <b><span>@Model.User.ServerName</span></b>
            }
            else
            {
                <span>N/A</span>
            }
        </div>
    </div>
</div>

<!-- Spinner Overlay -->
<div id="spinner-overlay" class="spinner-overlay d-none">
    <div class="spinner-container">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
</div>

<div class="container my-4" style="background-color: #f4f4f4; padding: 5px; border-radius: 8px;">
    <form asp-action="Search" method="post" class="card p-2 shadow-sm" id="search-form" style="height: 30%; overflow-y: auto;">
        <div class="row g-2 mb-3">
            <div class="col-md-4">
                <label for="InvoiceId" class="form-label">VENDOR NAME</label>
                <input type="text" id="VendorName" name="VendorName" class="form-control" value="@(Model.VendorName ?? "")" />
            </div>
            <div class="col-md-4">
                <label for="InvoiceNumber" class="form-label">INVOICE NUMBER</label>
                <input type="text" id="InvoiceNumber" name="InvoiceNumber" class="form-control" value="@(Model.InvoiceNumber ?? "")" />
            </div>
            <div class="col-md-4">
                <label for="VendorNumber" class="form-label">VENDOR NUMBER</label>
                <input type="text" id="VendorNumber" name="VendorNumber" class="form-control" value="@(Model.VendorNumber ?? "")" />
            </div>
        </div>
        <div class="row g-2 mb-3 align-items-end">
            <div class="col-md-4">
                <label for="StartDate" class="form-label">Start Date</label>
                <input type="date" id="StartDate" name="StartDate" class="form-control" value="@Model.StartDate?.ToString("yyyy-MM-dd")" />
            </div>
            <div class="col-md-4">
                <label for="EndDate" class="form-label">End Date</label>
                <input type="date" id="EndDate" name="EndDate" class="form-control" value="@Model.EndDate?.ToString("yyyy-MM-dd")" />
            </div>
            <div class="col-md-4 text-end">
                <button type="submit" class="btn btn-sm" style="background-color: #4CAF50; color: white; padding: 5px 15px; border-radius: 15px; font-size: 14px;">
                    <i class="bi bi-search" style="font-size: 16px;"></i> Search
                </button>
                <button type="button" id="reset-button" class="btn btn-secondary ms-2" style="padding: 5px 15px; border-radius: 15px; font-size: 14px;">
                    <i class="bi bi-arrow-counterclockwise" style="font-size: 16px;"></i> Reset
                </button>
            </div>
        </div>
    </form>
    <!-- Main Content -->
    <div class="container my-4" style="background-color: #f4f4f4; padding: 5px; border-radius: 8px;">

        @if (Model.Results.Any())
        {
            <form asp-action="ExportToPdf" method="post" class="mt-4" id="export-form">

                <div class="d-flex justify-content-between align-items-center mb-2 search-results-header">
                    <div>
                        <span>Total Count: <strong id="total-items">@Model.Results.Count()</strong></span>
                        <span class="ms-3">Selected Count: <strong id="selected-items">0</strong></span>
                    </div>

                    <div class="d-flex align-items-center">
                        <div class="form-check me-3" style="display:none">
                            <input class="form-check-input" type="checkbox" id="combined-checkbox" name="combined" value="true" >
                            <label class="form-check-label" for="combined-checkbox">Combined pdf</label>
                        </div>

                        <button class="btn btn-success" id="export-button" type="button" disabled>
                            <span class="spinner-border spinner-border-sm d-none" role="status" id="loader" aria-hidden="true"></span>
                            <i class="bi bi-file-earmark-pdf"></i> <span id="button-text">Download</span>
                        </button>

                    </div>
                </div>

                <div class="table-responsive w-100" style="max-height: 400px; overflow-y: auto;">
                    <table class="table table-striped table-bordered table-hover">
                        <thead class="table-light sticky-top">
                            <tr>
                                <th scope="col" style="width: 5%; text-align: center;">
                                    <input type="checkbox" id="select-all" aria-label="Select All" />
                                </th>
                                <th scope="col" style="width: 10%; text-align: left;" data-sort="product" data-asc="true">
                                    Vendor Number <span class="sort-icon">&#x25B2;</span>
                                </th>
                                <th scope="col" style="width: 20%; text-align: left;" data-sort="product" data-asc="true">
                                    Vendor Name <span class="sort-icon">&#x25B2;</span>
                                </th>
                                <th scope="col" style="width: 10%; text-align: left;" data-sort="product" data-asc="true">
                                    Vendor Site Code <span class="sort-icon">&#x25B2;</span>
                                </th>
                                <th scope="col" style="width: 10%; text-align: left;" data-sort="product" data-asc="true">
                                    Invoice ID <span class="sort-icon">&#x25B2;</span>
                                </th>
                                <th scope="col" style="width: 20%; text-align: left;" data-sort="product" data-asc="true">
                                    Invoice Number <span class="sort-icon">&#x25B2;</span>
                                </th>
                                <th scope="col" style="width: 15%; text-align: left;" data-sort="product" data-asc="true">
                                    Invoice Date <span class="sort-icon">&#x25B2;</span>
                                </th>
                                <th scope="col" style="width: 10%; text-align: center;">Document</th>
                            </tr>
                        </thead>
                        <tbody id="table-body">
                            @foreach (var vendor in Model.Results)
                            {
                                <tr data-product-name="@vendor.VendorName">
                                    <td style="text-align: center;">
                                        <input type="checkbox" class="select-checkbox" name="SelectedIds" value="@vendor.InvoiceId" data-product-name="@($"{vendor.InvoiceNumber}_{vendor.PdfFile}")" aria-label="Select Record" onchange="updateSelectedCount()" />
                                    </td>
                                    <td data-sort-value="@vendor.VendorNumber">@vendor.VendorNumber</td>
                                    <td data-sort-value="@vendor.VendorName">@vendor.VendorName</td>
                                    <td data-sort-value="@vendor.VendorSiteCode">@vendor.VendorSiteCode</td>
                                    <td data-sort-value="@vendor.InvoiceId">@vendor.InvoiceId</td>
                                    <td data-sort-value="@vendor.InvoiceNumber">@vendor.InvoiceNumber</td>
                                    <td data-sort-value="@vendor.InvoiceDate">@(DateTime.TryParse(vendor.InvoiceDate, out var parsedDate) ? parsedDate.ToString("MM/dd/yyyy") : vendor.InvoiceDate)</td>
                              
                               @*    <td>
                                    <a href='@Url.Action("GetDataSheet", "Invoice",  new { invoiceId = vendor.InvoiceId, docName = vendor.InvoiceNumber + vendor.PdfFile })' target="_blank">
                                        <i class='fa fa-file-pdf-o' style='text-shadow: 4px 3px 2px #b3b3b3; color:blue; font-size: 16px;' data-toggle='tooltip' data-original-title='Invoice'></i>
                                    </a>
                                </td> *@

                                    <td>
                                        <a href='@Url.Action("GetDataSheet", "Invoice", new { invoiceId = vendor.InvoiceId, docName = vendor.InvoiceNumber + vendor.PdfFile })' target="_blank">
                                            @if (!vendor.PdfFile.ToLower().Contains(".pdf"))
                                            {
                                                <i class='fa fa-envelope' style='text-shadow: 4px 3px 2px #ffffff; color:blue; font-size: 20px;' data-toggle='tooltip' data-original-title='Email Invoice'></i>
                                            }
                                            else
                                            {
                                                <i class='fa fa-file-pdf-o' style='text-shadow: 4px 3px 2px #ffffff; color:red; font-size: 22px;' data-toggle='tooltip' data-original-title='Invoice'></i>
                                            }
                                        </a>
                                    </td>

                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </form>
        }
        else if (Model.Results.Count > 0)
        {
            <p class="text-muted text-center mt-4">No results found. Please adjust your search criteria.</p>
        }

    </div>

    @section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>

    document.getElementById('reset-button').addEventListener('click', function () {
        // Reset the form
        document.getElementById('search-form').reset();
    });

        $(document).ready(function () {
            $('.select2-dropdown').select2({
                placeholder: "Select an option",
                allowClear: true
            });
        });

        $(document).ready(function () {
                $('#search-form').on('submit', function (e) {
                e.preventDefault();

        $('#spinner-overlay').removeClass('d-none');
        $('body').css('overflow', 'hidden'); // Prevent scrolling
                $('.container').addClass('disabled'); // Disable the form and table

        setTimeout(function () {
                $('#search-form')[0].submit(); // Submit the form after a delay (if needed)
                }, 500);
                });
                });


        document.getElementById("export-button").addEventListener("click", function () {
            const exportButton = this;
            const buttonText = document.getElementById("button-text");
            const loader = document.getElementById("loader");

            const selectedItems = Array.from(document.querySelectorAll(".select-checkbox:checked")).map(checkbox => ({
                Id: checkbox.value,
                InvoiceNumber: checkbox.dataset.productName // Assuming data-product-name attribute is set in the checkbox
            }))
            const combined = document.getElementById("combined-checkbox").checked;

            // Show loader, change button text, and disable button
            loader.classList.remove("d-none");
            buttonText.textContent = "Downloading...";
            exportButton.disabled = true;

            const url = '@Url.Action("ExportToPdf", "Invoice")';
            fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ SelectedItems: selectedItems, Combined: combined })
            })
            .then(response => {
                if (response.ok) {
                    return response.blob();
                } else {
                    throw new Error("Download failed");
                }
            })
            .then(blob => {
                const downloadUrl = window.URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.href = downloadUrl;

                // Create a timestamped filename
                const timestamp = new Date().toISOString().replace(/[:.-]/g, '');
                a.download = combined
                    ? `Oracle_${timestamp}.pdf`
                    : `Oracle_${timestamp}.zip`;

                // Trigger download
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(downloadUrl);
            })
            .catch(error => {
                console.error("Error:", error);
            })
            .finally(() => {
                // Hide loader, reset button text, and re-enable button
                loader.classList.add("d-none");
                buttonText.textContent = "Download";
                exportButton.disabled = false;
            });
        });



                  // $(document).ready(function () {
                  //       $('[data-toggle="tooltip"]').tooltip();
                  // });

                 $('#select-all').on('change', function () {
                        var isChecked = $(this).is(':checked');
                        $('.select-checkbox').prop('checked', isChecked);
                        updateSelectedCount(); // Update selected items count
                    });

                    // If any checkbox is unchecked, uncheck the "Select All" checkbox
                    $('.select-checkbox').on('change', function () {
                        if (!this.checked) {
                            $('#select-all').prop('checked', false);
                        }
                        // If all checkboxes are checked, check the "Select All" checkbox
                        if ($('.select-checkbox:checked').length === $('.select-checkbox').length) {
                            $('#select-all').prop('checked', true);
                        }
                        updateSelectedCount();
                    });
                    const totalItems = $('#total-items').text();
                    const selectedItemsCount = $('#selected-items');
                    const exportButton = $('#export-button');

                    function updateSelectedCount() {
                        const selectedCount = $('.select-checkbox:checked').length;
                        selectedItemsCount.text(selectedCount);

                        // Enable or disable the export button based on the number of selected items
                        exportButton.prop('disabled', selectedCount === 0);
                    }
                    updateSelectedCount();
                document.addEventListener('DOMContentLoaded', function() {
                    const checkboxes = document.querySelectorAll('.select-checkbox');
                    const exportButton = document.getElementById('export-button');

                    function toggleExportButton() {
                        exportButton.disabled = !Array.from(checkboxes).some(checkbox => checkbox.checked);
                    }

                    checkboxes.forEach(checkbox => {
                        checkbox.addEventListener('change', toggleExportButton);
                    });
                });

             document.addEventListener('DOMContentLoaded', function () {
                document.querySelectorAll('th[data-sort]').forEach(function (header) {
                    header.addEventListener('click', function () {
                        const tableBody = document.querySelector('#table-body');
                        const rows = Array.from(tableBody.querySelectorAll('tr'));
                        const isAscending = header.getAttribute('data-asc') === 'true';

                        // Determine the column index based on the clicked header
                        const columnIndex = Array.from(header.parentNode.children).indexOf(header);

                        // Sort the rows based on the column index
                        rows.sort(function (a, b) {
                            const cellA = a.cells[columnIndex].getAttribute('data-sort-value') || a.cells[columnIndex].textContent;
                            const cellB = b.cells[columnIndex].getAttribute('data-sort-value') || b.cells[columnIndex].textContent;

                            // Handle sorting
                            if (cellA < cellB) return isAscending ? -1 : 1;
                            if (cellA > cellB) return isAscending ? 1 : -1;
                            return 0;
                        });

                        // Toggle the sort order for this column
                        header.setAttribute('data-asc', !isAscending);

                        // Update the sort icons
                        document.querySelectorAll('.sort-icon').forEach(icon => {
                            icon.innerHTML = '&#x25B2;'; // Default to up arrow
                        });
                        header.querySelector('.sort-icon').innerHTML = isAscending ? '&#x25BC;' : '&#x25B2;'; // Down arrow for descending

                        // Clear existing rows and append the sorted rows
                        tableBody.innerHTML = '';
                        rows.forEach(function (row) {
                            tableBody.appendChild(row);
                        });
                    });
                });
            });

            //  document.getElementById('export-form').onsubmit = function () {
            //    document.getElementById('download-message').style.display = 'block';
            //};


    </script>
    }
